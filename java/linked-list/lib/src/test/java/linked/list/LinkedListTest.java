/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class LinkedListTest
{
  @Test
  void testIsPalindrome()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();
    linkedList.append(2);
    linkedList.append(3);
    linkedList.append(3);
    linkedList.append(2);

    assertTrue(linkedList.isPalindrome());

    LinkedList<Integer> linkedList2 = new LinkedList<>();
    linkedList2.append(5);
    linkedList2.append(1);
    linkedList2.append(3);
    linkedList2.append(2);

    assertFalse(linkedList2.isPalindrome());
  }

  @Test
  void canZipLists()
  {
    LinkedList<Integer> linkedList1 = new LinkedList<>(); // 5 - 3 - 2
    linkedList1.append(5);
    linkedList1.append(3);
    linkedList1.append(2);

    LinkedList<Integer> linkedList2 = new LinkedList<>(); // 8 - 12 - 5
    linkedList2.append(8);
    linkedList2.append(12);
    linkedList2.append(5);

    String string = LinkedList.zipLists(linkedList1.getHead(), linkedList2.getHead()).toString();
    String comparison = "{ 5 } -> { 8 } -> { 3 } -> { 12 } -> { 2 } -> { 5 } -> NULL";

    assertEquals(string, comparison);

    LinkedList<Integer> linkedList3 = new LinkedList<>(); // 5 - 3 - 2
    linkedList3.append(5);
    linkedList3.append(3);
    linkedList3.append(2);
    linkedList3.append(7);
    linkedList3.append(9);
    linkedList3.append(92);

    LinkedList<Integer> linkedList4 = new LinkedList<>(); // 8 - 12 - 5
    linkedList4.append(8);
    linkedList4.append(12);
    linkedList4.append(5);
    linkedList4.append(76);
    linkedList4.append(8754);
    linkedList4.append(32);

    string = LinkedList.zipLists(linkedList3.getHead(), linkedList4.getHead()).toString();

    comparison = "{ 5 } -> { 8 } -> { 3 } -> { 12 } -> { 2 } -> { 5 } -> { 7 } -> { 76 } -> { 9 } -> { 8754 } -> { 92" +
      " } -> { 32 } -> NULL";

    assertEquals(string, comparison);
  }
  @Test
  void canAppendLinkedList()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(3);
    linkedList.append(10);


    assertTrue(linkedList.getHead().getValue() != 10);

    LinkedList<Integer> linkedList2 = new LinkedList<>();

    linkedList2.append(52);

    assertEquals(52, linkedList2.getHead().getValue());
  }

  @Test
  void canInsertBefore()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(5);
    linkedList.insert(3);
    linkedList.insert(2); // 2 -> 3 -> 5

    linkedList.insertBefore(3, 12);

    String string = linkedList.toString();
    String comparison = "{ 2 } -> { 12 } -> { 3 } -> { 5 } -> NULL";

    assertEquals(string, comparison);
  }

  @Test
  void insertAfter()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(5);
    linkedList.insert(10);
    linkedList.insert(25); // 25 -> 10 -> 5

    linkedList.insertAfter(10, 50);

    String string = linkedList.toString();
    String comparison = "{ 25 } -> { 10 } -> { 50 } -> { 5 } -> NULL";

    assertEquals(string, comparison);
  }

  @Test
  void canInstantiateLinkedList()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    assertEquals("NULL", linkedList.toString());
  }

  @Test
  void canInsertIntoLinkedList()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(5);

    assertTrue(linkedList.toString().contains("5"));
  }

  @Test
  void headPointsToFirst()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(3);

    assertEquals(3, linkedList.getHead().getValue());
  }

  @Test
  void canInsertMultipleNodes()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(5);
    linkedList.insert(2);
    linkedList.insert(-1);

    assertTrue(linkedList.toString().contains("5"));
    assertTrue(linkedList.toString().contains("2"));
    assertTrue(linkedList.toString().contains("-1"));
  }

  @Test
  void includesReturnsTrue()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(10);

    assertTrue(linkedList.includes(10));

  }

  @Test
  void includesReturnsFalse()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(53);

    assertFalse(linkedList.includes(12));
  }

  @Test
  void toStringReturnsFormattedText()
  {
    LinkedList<Integer> linkedList = new LinkedList<>();

    linkedList.insert(12);
    linkedList.insert(5);
    linkedList.insert(3);
    linkedList.insert(7);
    linkedList.insert(9);

    String shouldEqual = "{ 9 } -> { 7 } -> { 3 } -> { 5 } -> { 12 } -> NULL";
    String s = linkedList.toString();
    assertEquals(linkedList.toString(), shouldEqual);
  }

}
